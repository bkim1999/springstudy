DROP SEQUENCE USER_SEQ;
DROP SEQUENCE FREE_SEQ;
DROP SEQUENCE BLOG_SEQ;
DROP SEQUENCE COMMENT_SEQ;
DROP SEQUENCE UPLOAD_SEQ;
DROP SEQUENCE ATTACH_SEQ;

CREATE SEQUENCE USER_SEQ NOCACHE;
CREATE SEQUENCE FREE_SEQ NOCACHE;
CREATE SEQUENCE BLOG_SEQ NOCACHE;
CREATE SEQUENCE COMMENT_SEQ NOCACHE;
CREATE SEQUENCE UPLOAD_SEQ NOCACHE;
CREATE SEQUENCE ATTACH_SEQ NOCACHE;

DROP TABLE COMMENT_T;
DROP TABLE BLOG_IMAGE_T;
DROP TABLE BLOG_T;
DROP TABLE FREE_T;
DROP TABLE INACTIVE_USER_T;
DROP TABLE LEAVE_USER_T;
DROP TABLE ACCESS_T;
DROP TABLE USER_T;

CREATE TABLE USER_T (
    USER_NO         NUMBER              NOT NULL,
    EMAIL           VARCHAR2(100 BYTE)  NOT NULL UNIQUE,
    PW              VARCHAR2(64 BYTE)   NULL,
    NAME            VARCHAR2(50 BYTE),
    GENDER          VARCHAR2(3 BYTE),
    MOBILE          VARCHAR2(15 BYTE),
    POSTCODE        VARCHAR2(5 BYTE),
    ROAD_ADDRESS    VARCHAR2(100 BYTE),
    JIBUN_ADDRESS   VARCHAR2(100 BYTE),
    DETAIL_ADDRESS  VARCHAR2(100 BYTE),
    AGREE           NUMBER              NOT NULL,
    STATE           NUMBER              NULL,
    PW_MODIFIED_AT  DATE,
    JOINED_AT       DATE,
    CONSTRAINT PK_USER PRIMARY KEY(USER_NO)
);

CREATE TABLE ACCESS_T (
    EMAIL       VARCHAR2(100 BYTE)  NOT NULL,
    LOGIN_AT    DATE,
    CONSTRAINT FK_USER_ACCESS FOREIGN KEY(EMAIL) REFERENCES USER_T(EMAIL) ON DELETE CASCADE
);

CREATE TABLE LEAVE_USER_T (
    EMAIL       VARCHAR2(100 BYTE) NOT NULL,
    JOINED_AT   DATE,
    LEAVED_AT    DATE
);
    
CREATE TABLE INACTIVE_USER_T (
    USER_NO         NUMBER              NOT NULL,
    EMAIL           VARCHAR2(100 BYTE)  NOT NULL UNIQUE,
    PW              VARCHAR2(64 BYTE)   NULL,
    NAME            VARCHAR2(50 BYTE),
    GENDER          VARCHAR2(3 BYTE),
    MOBILE          VARCHAR2(15 BYTE),
    POSTCODE        VARCHAR2(5 BYTE),
    ROAD_ADDRESS    VARCHAR2(100 BYTE),
    JIBUN_ADDRESS   VARCHAR2(100 BYTE),
    DETAIL_ADDRESS  VARCHAR2(100 BYTE),
    AGREE           NUMBER              NOT NULL,
    STATE           NUMBER              NULL,
    PW_MODIFIED_AT  DATE,
    JOINED_AT       DATE,
    INACTIVED_AT    DATE,
    CONSTRAINT PK_INACTIVE_USER PRIMARY KEY(USER_NO)
);

-- 자유게시판
CREATE TABLE FREE_T (
    FREE_NO     NUMBER              NOT NULL,
    EMAIL       VARCHAR2(100 BYTE)  NULL,
    CONTENTS    VARCHAR2(4000 BYTE) NOT NULL,
    CREATED_AT  TIMESTAMP           NULL,
    STATUS      NUMBER              NOT NULL,
    DEPTH       NUMBER              NOT NULL,
    GROUP_NO    NUMBER              NOT NULL,
    GROUP_ORDER NUMBER              NOT NULL,  
    CONSTRAINT PK_FREE PRIMARY KEY(FREE_NO),
    CONSTRAINT PK_FREE_USER FOREIGN KEY(EMAIL) REFERENCES USER_T(EMAIL) ON DELETE SET NULL
);

INSERT INTO USER_T VALUES(USER_SEQ.NEXTVAL, '해린@gmail.com', STANDARD_HASH('1111', 'SHA256'), '강해린', 'F', '01011111111', '11111', '뉴진스로', '뉴진스동', '뉴진스호', 0, 0, SYSDATE, SYSDATE);

-- 자유게시판 작성
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유2',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유3',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유4',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유5',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유6',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유7',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유8',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유9',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유10',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유11',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유12',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유13',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유14',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);
INSERT INTO FREE_T VALUES (FREE_SEQ.NEXTVAL, '해린@gmail.com', '김민지가 최고인 일흔 일곱가지 이유15',SYSTIMESTAMP, 1, 0, FREE_SEQ.CURRVAL, 0);

-- 쿼리 테스트
SELECT FREE_NO, EMAIL, CONTENTS, CREATED_AT, STATUS, DEPTH, GROUP_NO, GROUP_ORDER
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY FREE_NO DESC) AS RN, FREE_NO, EMAIL, CONTENTS, CREATED_AT, STATUS, DEPTH, GROUP_NO, GROUP_ORDER
          FROM FREE_T)
 WHERE RN <= 10;

    
    

--BLOG
CREATE TABLE BLOG_T (
    BLOG_NO     NUMBER              NOT NULL,
    TITLE       VARCHAR2(500 BYTE)  NOT NULL,
    CONTENTS    CLOB                NULL,
    USER_NO     NUMBER              NOT NULL,
    HIT         NUMBER              DEFAULT 0,
    IP          VARCHAR2(30 BYTE)   NULL,
    CREATED_AT  VARCHAR2(30 BYTE)   NULL,
    MODIFIED_AT VARCHAR2(30 BYTE)   NULL,
    CONSTRAINT PK_BLOG PRIMARY KEY(BLOG_NO),
    CONSTRAINT FK_BLOG_USER FOREIGN KEY(USER_NO) REFERENCES USER_T(USER_NO) ON DELETE SET NULL
);

-- BLOG 쿼리
SELECT A.BLOG_NO, A.TITLE, A.CONTENTS, A.USER_NO, A.HIT, A.IP, A.CREATED_AT, A.MODIFIED_AT, A.EMAIL
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY B.BLOG_NO DESC) AS RN, B.BLOG_NO, B.TITLE, B.CONTENTS, B.USER_NO, B.HIT, B.IP, B.CREATED_AT, B.MODIFIED_AT, U.EMAIL
          FROM USER_T U LEFT OUTER JOIN BLOG_T B
            ON B.USER_NO = U.USER_NO) A
 WHERE A.RN BETWEEN 1 AND 10;
 
-- 조회수 증가
UPDATE BLOG_T
   SET HIT = HIT + 1
 WHERE BLOG_NO = 1;

-- 블로그 이미지
CREATE TABLE BLOG_IMAGE_T (
    BLOG_NO             NUMBER              NOT NULL,
    IMAGE_PATH          VARCHAR2(100 BYTE)  NULL,
    FILESYSTEM_NAME     VARCHAR2(100 BYTE)  NULL,
    CONSTRAINT FK_BLOG_IMAGE FOREIGN KEY(BLOG_NO) REFERENCES BLOG_T(BLOG_NO) ON DELETE CASCADE
);

-- COMMENT
CREATE TABLE COMMENT_T (
    COMMENT_NO  NUMBER              NOT NULL,
    CONTENTS    VARCHAR2(4000 BYTE) NULL,
    USER_NO     NUMBER              NULL,
    BLOG_NO     NUMBER              NOT NULL,
    CREATED_AT  VARCHAR2(30 BYTE)   NULL,
    STATUS      NUMBER              NOT NULL,
    DEPTH       NUMBER              NOT NULL,
    GROUP_NO    NUMBER              NOT NULL,
    CONSTRAINT PK_COMMENT PRIMARY KEY(COMMENT_NO),
    CONSTRAINT FK_COMMENT_USER FOREIGN KEY(USER_NO) REFERENCES USER_T(USER_NO) ON DELETE SET NULL,
    CONSTRAINT FK_COMMENT_BLOG FOREIGN KEY(BLOG_NO) REFERENCES BLOG_T(BLOG_NO) ON DELETE CASCADE
);

SELECT A.COMMENT_NO, A.CONTENTS, A.BLOG_NO, A.CREATED_AT, A.STATUS, A.DEPTH, A.GROUP_NO, A.USER_NO, A.NAME
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY C.GROUP_NO DESC, C.DEPTH ASC, C.COMMENT_NO DESC) AS RN, C.COMMENT_NO, C.CONTENTS, C.BLOG_NO, C.CREATED_AT, C.STATUS, C.DEPTH, C.GROUP_NO, U.USER_NO, U.NAME
          FROM USER_T U INNER JOIN COMMENT_T C
            ON U.USER_NO = C.USER_NO
         WHERE C.BLOG_NO = 4) A
 WHERE A.RN BETWEEN 1 AND 10;
 
-- UPLOAD
CREATE TABLE UPLOAD_T (
    UPLOAD_NO   NUMBER              NOT NULL,
    TITLE       VARCHAR2(500 BYTE)  NOT NULL,
    CONTENTS    VARCHAR2(4000 BYTE) NULL,
    USER_NO     NUMBER              NULL,
    CREATED_AT  VARCHAR2(30 BYTE)   NULL,
    MODIFIED_AT VARCHAR2(30 BYTE)   NULL,
    CONSTRAINT PK_UPLOAD PRIMARY KEY(UPLOAD_NO),
    CONSTRAINT PK_USER_UPLOAD FOREIGN KEY(USER_NO) REFERENCES USER_T(USER_NO) ON DELETE SET NULL
);

CREATE TABLE ATTACH_T (
    ATTACH_NO           NUMBER NOT NULL,
    PATH                VARCHAR2(300 BYTE)      NOT NULL,
    ORIGINAL_FILENAME   VARCHAR2(300 BYTE)      NULL,
    FILESYSTEM_NAME     VARCHAR2(300 BYTE)      NOT NULL,
    DOWNLOAD_COUNT      NUMBER                  NULL,
    HAS_THUMBNAIL       NUMBER                  NULL,
    UPLOAD_NO           NUMBER                  NULL,
    CONSTRAINT PK_ATTACH PRIMARY KEY(ATTACH_NO),
    CONSTRAINT PK_UPLOAD_ATTACH FOREIGN KEY(UPLOAD_NO) REFERENCES UPLOAD_T(UPLOAD_NO) ON DELETE SET NULL
);
INSERT INTO ATTACH_T (
    ATTACH_NO
  , PATH
  , ORIGINAL_FILENAME
  , FILESYSTEM_NAME
  , DOWNLOAD_COUNT
  , HAS_THUMBNAIL
  , UPLOAD_NO
    ) VALUES (
       ATTACH_SEQ.NEXTVAL,
        'd',
        'd',
        'd',
        0,
        1,
        1
);